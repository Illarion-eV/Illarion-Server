name: Build Illarion Server Image

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*.*.*.*'
  pull_request:

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: Compile and Test
    runs-on: ubuntu-latest

    container:
      image: debian:buster

    steps:
      - name: Install dependencies
        run: |
          apt-get update
          export DEBIAN_FRONTEND=noninteractive
          apt-get -y -qq install build-essential cmake git
          apt-get -y -qq install libboost-graph-dev libboost-system-dev libpqxx-dev lua5.2-dev
      
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache build results
        uses: actions/cache@v2
        with:
          path: |
            ../build
          key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-cmake-

      - name: Create Build Environment
        run: cmake -E make_directory ../build

      - name: Configure CMake
        shell: bash
        working-directory: ../build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build
        working-directory: ../build
        shell: bash
        run: cmake --build . --config $BUILD_TYPE --parallel 2

      - name: Test
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: |
          ctest -C $BUILD_TYPE

      - name: Package
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cpack .

      - uses: actions/upload-artifact@v2
        with:
          name: Package
          path: ${{runner.workspace}}/build/illarion.deb
          if-no-files-found: error
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v2

      - name: Repo metadata
        id: repo
        uses: actions/github-script@v3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data

      - name: Fetch Artifact
        uses: actions/download-artifact@v2
        with:
          name: Package
          path: ${{runner.workspace}}

      - name: Prepare Docker environment
        id: prepare
        shell: bash
        run: |
          mv ${{runner.workspace}}/illarion.deb $GITHUB_WORKSPACE/setup/docker/base/
          DOCKER_IMAGE=ghcr.io/${GITHUB_REPOSITORY,,}/base
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            PATCH=${VERSION%.*}
            MINOR=${PATCH%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${PATCH},${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          HAS_SECRET=false
          DOCKER_SECRET=${{ secrets.GHCR_PAT }}
          if [[ github.event_name != 'pull_request' && "${DOCKER_SECRET}" != '' ]]; then
            HAS_SECRET=true
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=has_docker_secret::${HAS_SECRET}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GitHub
        if: ${{ steps.prepare.outputs.has_docker_secret == 'true' }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: setup/docker/base
          file: setup/docker/base/Dockerfile
          platforms: linux/amd64
          push: ${{ steps.prepare.outputs.has_docker_secret == 'true' }}
          tags: ${{ steps.prepare.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ fromJson(steps.repo.outputs.result).name }}
            org.opencontainers.image.description=${{ fromJson(steps.repo.outputs.result).description }}
            org.opencontainers.image.url=${{ fromJson(steps.repo.outputs.result).html_url }}
            org.opencontainers.image.source=${{ fromJson(steps.repo.outputs.result).clone_url }}
            org.opencontainers.image.version=${{ steps.prepare.outputs.version }}
            org.opencontainers.image.created=${{ steps.prepare.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ fromJson(steps.repo.outputs.result).license.spdx_id }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Clean Docker environment
        shell: bash
        run: |
          rm $GITHUB_WORKSPACE/setup/docker/base/illarion.deb